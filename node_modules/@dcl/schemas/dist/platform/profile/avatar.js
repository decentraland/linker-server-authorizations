"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Avatar = exports.Link = exports.LinkUrl = exports.AvatarInfo = exports.Snapshots = void 0;
const wearable_category_1 = require("../item/wearable/wearable-category");
const misc_1 = require("../../misc");
const validation_1 = require("../../validation");
/**
 * Snapshots
 * @alpha
 */
var Snapshots;
(function (Snapshots) {
    Snapshots.schema = {
        type: 'object',
        required: ['face256', 'body'],
        properties: {
            face256: misc_1.IPFSv2.schema,
            body: misc_1.IPFSv2.schema
        }
    };
    Snapshots.validate = (0, validation_1.generateLazyValidator)(Snapshots.schema);
})(Snapshots = exports.Snapshots || (exports.Snapshots = {}));
/**
 * AvatarInfo
 * @alpha
 */
var AvatarInfo;
(function (AvatarInfo) {
    AvatarInfo.schema = {
        type: 'object',
        required: ['bodyShape', 'eyes', 'hair', 'skin'],
        properties: {
            bodyShape: {
                type: 'string'
            },
            eyes: {
                type: 'object',
                required: ['color'],
                properties: {
                    color: misc_1.Color3.schema
                }
            },
            hair: {
                type: 'object',
                required: ['color'],
                properties: {
                    color: misc_1.Color3.schema
                }
            },
            skin: {
                type: 'object',
                required: ['color'],
                properties: {
                    color: misc_1.Color3.schema
                }
            },
            wearables: {
                type: 'array',
                items: {
                    type: 'string'
                }
            },
            forceRender: {
                type: 'array',
                nullable: true,
                items: wearable_category_1.WearableCategory.schema
            },
            emotes: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        slot: { type: 'number' },
                        urn: { type: 'string' }
                    },
                    required: ['slot', 'urn']
                },
                nullable: true
            },
            snapshots: Snapshots.schema
        },
        additionalProperties: true
    };
    AvatarInfo.validate = (0, validation_1.generateLazyValidator)(AvatarInfo.schema);
})(AvatarInfo = exports.AvatarInfo || (exports.AvatarInfo = {}));
/**
 * LinkUrl
 * @alpha
 */
var LinkUrl;
(function (LinkUrl) {
    LinkUrl.schema = {
        type: 'string',
        pattern: '^[(http(s)?):\\/\\/(www\\.)?a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$'
    };
    const regexp = new RegExp(LinkUrl.schema.pattern, 'i');
    LinkUrl.validate = (url) => regexp.test(url);
})(LinkUrl = exports.LinkUrl || (exports.LinkUrl = {}));
/**
 * Link
 * @alpha
 */
var Link;
(function (Link) {
    Link.schema = {
        type: 'object',
        required: ['title', 'url'],
        properties: {
            title: {
                type: 'string'
            },
            url: LinkUrl.schema
        }
    };
})(Link = exports.Link || (exports.Link = {}));
/**
 * Avatar
 * @alpha
 */
var Avatar;
(function (Avatar) {
    Avatar.schema = {
        type: 'object',
        required: ['name', 'description', 'ethAddress', 'version', 'tutorialStep', 'avatar', 'hasClaimedName'],
        properties: {
            userId: {
                type: 'string'
            },
            name: {
                type: 'string'
            },
            description: {
                type: 'string'
            },
            links: {
                type: 'array',
                maxItems: 5,
                items: Link.schema,
                nullable: true
            },
            country: {
                nullable: true,
                type: 'string'
            },
            employmentStatus: {
                nullable: true,
                type: 'string'
            },
            gender: {
                nullable: true,
                type: 'string'
            },
            pronouns: {
                nullable: true,
                type: 'string'
            },
            relationshipStatus: {
                nullable: true,
                type: 'string'
            },
            sexualOrientation: {
                nullable: true,
                type: 'string'
            },
            language: {
                nullable: true,
                type: 'string'
            },
            profession: {
                nullable: true,
                type: 'string'
            },
            birthdate: {
                nullable: true,
                type: 'number'
            },
            realName: {
                nullable: true,
                type: 'string'
            },
            hobbies: {
                nullable: true,
                type: 'string'
            },
            ethAddress: misc_1.EthAddress.schema,
            version: {
                type: 'number'
            },
            tutorialStep: {
                type: 'number'
            },
            email: {
                type: 'string',
                nullable: true
            },
            blocked: {
                type: 'array',
                items: {
                    type: 'string'
                },
                nullable: true
            },
            muted: {
                type: 'array',
                items: {
                    type: 'string'
                },
                nullable: true
            },
            interests: {
                type: 'array',
                items: {
                    type: 'string'
                },
                nullable: true
            },
            hasClaimedName: {
                type: 'boolean'
            },
            hasConnectedWeb3: {
                type: 'boolean',
                nullable: true
            },
            avatar: AvatarInfo.schema
        },
        additionalProperties: true
    };
    Avatar.validate = (0, validation_1.generateLazyValidator)(Avatar.schema);
})(Avatar = exports.Avatar || (exports.Avatar = {}));
//# sourceMappingURL=avatar.js.map