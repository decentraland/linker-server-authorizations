import { JSONSchema, ValidateFunction } from '../../validation';
import { DisplayableDeployment } from '../shared/displayable';
import { FeatureToggles } from './feature-toggles';
import { SceneParcels } from './scene-parcels';
import { Source } from './source';
import { SpawnPoint } from './spawn-point';
import { WorldConfiguration } from './world-configuration';
/** @alpha */
export declare enum RequiredPermission {
    ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE = "ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE",
    ALLOW_TO_TRIGGER_AVATAR_EMOTE = "ALLOW_TO_TRIGGER_AVATAR_EMOTE",
    ALLOW_MEDIA_HOSTNAMES = "ALLOW_MEDIA_HOSTNAMES",
    USE_WEB3_API = "USE_WEB3_API",
    USE_FETCH = "USE_FETCH",
    USE_WEBSOCKET = "USE_WEBSOCKET",
    OPEN_EXTERNAL_LINK = "OPEN_EXTERNAL_LINK"
}
/** @alpha */
export type Scene = DisplayableDeployment & {
    isPortableExperience?: boolean;
    main: string;
    scene: SceneParcels;
    display?: {
        title?: string;
        /** @deprecated use menuBarIcon instead */
        favicon?: string;
        description?: string;
        navmapThumbnail?: string;
    };
    owner?: string;
    contact?: {
        name?: string;
        email?: string;
        im?: string;
        url?: string;
    };
    tags?: string[];
    source?: Source;
    spawnPoints?: SpawnPoint[];
    requiredPermissions?: RequiredPermission[];
    featureToggles?: FeatureToggles;
    worldConfiguration?: WorldConfiguration;
    allowedMediaHostnames?: string[];
};
/** @alpha */
export declare namespace Scene {
    const schema: JSONSchema<Scene>;
    const validate: ValidateFunction<Scene>;
}
//# sourceMappingURL=scene.d.ts.map